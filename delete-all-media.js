import mongoose from "mongoose";
import User from "./api/models/user.model.js";
import renderStorage from "./api/services/renderStorage.js";
import dotenv from "dotenv";

// Charger les variables d'environnement
dotenv.config();

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_CONN || process.env.MONGODB_URI || process.env.DATABASE_URL;

if (!MONGODB_URI) {
  console.error(
    "‚ùå MONGODB_CONN, MONGODB_URI ou DATABASE_URL non d√©finie dans les variables d'environnement"
  );
  process.exit(1);
}

// Fonction pour se connecter √† MongoDB
async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log("‚úÖ Connect√© √† MongoDB");
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† MongoDB:", error);
    process.exit(1);
  }
}

// Fonction pour supprimer un fichier du stockage Render
async function deleteFileFromStorage(filePath) {
  if (!filePath) return;

  try {
    await renderStorage.deleteFile(filePath);
    console.log(`üóëÔ∏è  Fichier supprim√© du stockage: ${filePath}`);
    return true;
  } catch (error) {
    console.error(
      `‚ùå Erreur lors de la suppression du fichier ${filePath}:`,
      error.message
    );
    return false;
  }
}

// Fonction pour supprimer tous les m√©dias d'un utilisateur
async function deleteUserMedia(user) {
  let deletedCount = 0;
  let errors = [];

  console.log(`\nüë§ Traitement de l'utilisateur: ${user.name} (${user._id})`);

  // Supprimer l'avatar
  if (user.avatar) {
    console.log(`  üì∏ Avatar trouv√©: ${user.avatar}`);

    // Essayer de supprimer du stockage si c'est un fichier local
    if (user.avatar.includes("/uploads/")) {
      const filePath = user.avatar.split("/uploads/")[1];
      if (filePath) {
        await deleteFileFromStorage(filePath);
      }
    }

    // Supprimer l'URL de l'avatar
    user.avatar = null;
    deletedCount++;
    console.log(`  ‚úÖ Avatar supprim√©`);
  }

  // Supprimer les photos de galerie
  if (user.gallery && user.gallery.length > 0) {
    console.log(`  üñºÔ∏è  Galerie: ${user.gallery.length} photo(s) trouv√©e(s)`);

    for (const image of user.gallery) {
      try {
        // Supprimer du stockage si filePath existe
        if (image.filePath) {
          await deleteFileFromStorage(image.filePath);
        }

        // Supprimer du stockage si c'est un fichier local
        if (image.url && image.url.includes("/uploads/")) {
          const filePath = image.url.split("/uploads/")[1];
          if (filePath) {
            await deleteFileFromStorage(filePath);
          }
        }

        deletedCount++;
      } catch (error) {
        errors.push(
          `Erreur lors de la suppression de l'image ${image._id}: ${error.message}`
        );
      }
    }

    // Vider la galerie
    user.gallery = [];
    console.log(`  ‚úÖ Galerie vid√©e`);
  }

  // Supprimer les vid√©os
  if (user.videos && user.videos.length > 0) {
    console.log(`  üé• Vid√©os: ${user.videos.length} vid√©o(s) trouv√©e(s)`);

    for (const video of user.videos) {
      try {
        // Supprimer du stockage si filePath existe
        if (video.filePath) {
          await deleteFileFromStorage(video.filePath);
        }

        // Supprimer du stockage si c'est un fichier local
        if (video.url && video.url.includes("/uploads/")) {
          const filePath = video.url.split("/uploads/")[1];
          if (filePath) {
            await deleteFileFromStorage(filePath);
          }
        }

        deletedCount++;
      } catch (error) {
        errors.push(
          `Erreur lors de la suppression de la vid√©o ${video._id}: ${error.message}`
        );
      }
    }

    // Vider les vid√©os
    user.videos = [];
    console.log(`  ‚úÖ Vid√©os supprim√©es`);
  }

  // Supprimer les documents de v√©rification
  if (
    user.verification &&
    user.verification.documents &&
    user.verification.documents.length > 0
  ) {
    console.log(
      `  üìÑ Documents de v√©rification: ${user.verification.documents.length} document(s) trouv√©(s)`
    );

    for (const doc of user.verification.documents) {
      try {
        if (doc.filePath) {
          await deleteFileFromStorage(doc.filePath);
        }

        if (doc.url && doc.url.includes("/uploads/")) {
          const filePath = doc.url.split("/uploads/")[1];
          if (filePath) {
            await deleteFileFromStorage(filePath);
          }
        }

        deletedCount++;
      } catch (error) {
        errors.push(
          `Erreur lors de la suppression du document ${doc._id}: ${error.message}`
        );
      }
    }

    // Vider les documents
    user.verification.documents = [];
    console.log(`  ‚úÖ Documents de v√©rification supprim√©s`);
  }

  // Supprimer le document d'identit√©
  if (user.idDocument) {
    console.log(`  üÜî Document d'identit√© trouv√©: ${user.idDocument}`);

    if (user.idDocument.includes("/uploads/")) {
      const filePath = user.idDocument.split("/uploads/")[1];
      if (filePath) {
        await deleteFileFromStorage(filePath);
      }
    }

    user.idDocument = null;
    deletedCount++;
    console.log(`  ‚úÖ Document d'identit√© supprim√©`);
  }

  return { deletedCount, errors };
}

// Fonction principale
async function deleteAllMedia() {
  try {
    console.log("üöÄ D√©but de la suppression de tous les m√©dias...");

    // Se connecter √† la base de donn√©es
    await connectDB();

    // R√©cup√©rer tous les utilisateurs
    const users = await User.find({}).lean();
    console.log(`üìä ${users.length} utilisateur(s) trouv√©(s)`);

    let totalDeleted = 0;
    let totalErrors = [];
    let processedUsers = 0;

    // Traiter chaque utilisateur
    for (const user of users) {
      try {
        const result = await deleteUserMedia(user);
        totalDeleted += result.deletedCount;
        totalErrors.push(...result.errors);
        processedUsers++;

        // Sauvegarder les modifications de l'utilisateur
        await User.findByIdAndUpdate(user._id, {
          $set: {
            avatar: null,
            gallery: [],
            videos: [],
            "verification.documents": [],
            idDocument: null,
          },
        });

        console.log(`  üíæ Utilisateur mis √† jour dans la base de donn√©es`);
      } catch (error) {
        console.error(
          `‚ùå Erreur lors du traitement de l'utilisateur ${user._id}:`,
          error.message
        );
        totalErrors.push(`Erreur utilisateur ${user._id}: ${error.message}`);
      }

      // Afficher la progression
      console.log(
        `üìà Progression: ${processedUsers}/${users.length} utilisateurs trait√©s`
      );
    }

    // R√©sum√© final
    console.log("\nüéâ SUPPRESSION TERMIN√âE !");
    console.log(`üìä R√©sum√©:`);
    console.log(`   ‚Ä¢ Utilisateurs trait√©s: ${processedUsers}/${users.length}`);
    console.log(`   ‚Ä¢ M√©dias supprim√©s: ${totalDeleted}`);
    console.log(`   ‚Ä¢ Erreurs rencontr√©es: ${totalErrors.length}`);

    if (totalErrors.length > 0) {
      console.log("\n‚ö†Ô∏è  Erreurs rencontr√©es:");
      totalErrors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }

    console.log(
      "\n‚úÖ Tous les m√©dias ont √©t√© supprim√©s de la base de donn√©es !"
    );
  } catch (error) {
    console.error("‚ùå Erreur fatale:", error);
  } finally {
    // Fermer la connexion
    await mongoose.connection.close();
    console.log("üîå Connexion √† MongoDB ferm√©e");
    process.exit(0);
  }
}

// Fonction pour confirmer l'action
async function confirmDeletion() {
  console.log(
    "‚ö†Ô∏è  ATTENTION: Cette action va supprimer TOUS les m√©dias de TOUS les utilisateurs !"
  );
  console.log("üì∏ Cela inclut:");
  console.log("   ‚Ä¢ Tous les avatars");
  console.log("   ‚Ä¢ Toutes les photos de galerie");
  console.log("   ‚Ä¢ Toutes les vid√©os");
  console.log("   ‚Ä¢ Tous les documents de v√©rification");
  console.log("   ‚Ä¢ Tous les documents d'identit√©");
  console.log("\nüóëÔ∏è  Cette action est IRREVERSIBLE !");

  // En mode automatique, on continue directement
  console.log("\nüöÄ D√©marrage automatique de la suppression...");
  await deleteAllMedia();
}

// D√©marrer le script
if (process.argv.includes("--force")) {
  console.log("üîì Mode force activ√© - suppression sans confirmation");
  deleteAllMedia();
} else {
  confirmDeletion();
}
